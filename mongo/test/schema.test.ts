import { describe, it, expect } from 'bun:test';
import { field } from '../src/schema';
import { ObjectId } from 'mongodb';

describe('ðŸ§ª UUID test', () => {
	const uuidV4Regex = /^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/i;

	it('OBJECTID -> nullable or required', () => {
		expect(field.objectId().parse('68a5a8b40659fd1eed869f78')).toEqual(new ObjectId('68a5a8b40659fd1eed869f78'));
		expect(() => field.objectId().parse('')).toThrow();
		expect(() => field.objectId().parse(null)).toThrow();
		expect(() => field.objectId().parse(undefined)).toThrow();

		expect(field.objectId({ nullable: true }).parse(undefined)).toEqual(null);
		expect(field.objectId({ nullable: true }).parse(null)).toEqual(null);
	});

	it('UUID -> required, not null, not autogenerated', () => {
		const schema = field.uuid();

		expect(() => schema.parse('')).toThrow();
		expect(() => schema.parse(undefined)).toThrow();
		expect(schema.parse('99310037-e33a-41fd-9d44-aacbd236c2de')).toEqual('99310037-e33a-41fd-9d44-aacbd236c2de'); // no-autogeneration test
	});

	it('UUID -> require valid or autogenerated', () => {
		const schema = field.uuid({ auto: true });

		expect(() => schema.parse('')).toThrow();
		expect(() => schema.parse(null)).toThrow();
		expect(schema.parse(undefined)).toMatch(uuidV4Regex);
		expect(schema.parse('99310037-e33a-41fd-9d44-aacbd236c2de')).toEqual('99310037-e33a-41fd-9d44-aacbd236c2de'); // no-autogeneration test
	});

	it('UUID -> require valid or null', () => {
		const schema = field.uuid({ nullable: true });

		expect(() => schema.parse('')).toThrow();
		expect(schema.parse(undefined)).toEqual(null);
		expect(schema.parse(null)).toEqual(null);
		expect(schema.parse('99310037-e33a-41fd-9d44-aacbd236c2de')).toEqual('99310037-e33a-41fd-9d44-aacbd236c2de'); // no-autogeneration test
	});

	it('UUID -> missconfiguration', () => {
		// Must work just like { auto: true } only
		const schema = field.uuid({ nullable: true, auto: true });

		expect(() => schema.parse('')).toThrow();
		expect(() => schema.parse(null)).toThrow();
		expect(schema.parse(undefined)).toMatch(uuidV4Regex);
		expect(schema.parse('99310037-e33a-41fd-9d44-aacbd236c2de')).toEqual('99310037-e33a-41fd-9d44-aacbd236c2de'); // no-autogeneration test
	});
});

describe('String Test', () => {
	it('STR -> required, not null test', () => {
		const schema = field.string();

		expect(() => schema.parse(null)).toThrow();
		expect(() => schema.parse(undefined)).toThrow();
		expect(schema.parse('asd')).toEqual('asd');
	});

	it('STR -> nullable test', () => {
		const schema = field.string({ nullable: true });

		expect(schema.parse(null)).toEqual(null);
		expect(schema.parse(undefined)).toEqual(null);
		expect(schema.parse('asd')).toEqual('asd');
	});

	it('STR -> other options', () => {
		const schema = field.string({ min: 2, max: 5 });

		expect(() => schema.parse('a')).toThrow();
		expect(() => schema.parse('abcdef')).toThrow();
		expect(field.string({ lower: true }).parse('ABC')).toEqual('abc');
		expect(field.string({ upper: true }).parse('abc')).toEqual('ABC');
		expect(field.string({ format: 'email' }).parse('jonsnow@example.com')).toEqual('jonsnow@example.com');
		expect(() => field.string({ format: 'email' }).parse('jorge')).toThrow();
		expect(field.string({ format: 'email', nullable: true }).parse(null)).toEqual(null);
		expect(schema.parse('ab')).toEqual('ab');
	});
});

describe('Other Types test', () => {
	it('DATE -> default now and nullable', () => {
		expect(field.date({ defaultNow: true }).parse(undefined)).toBeInstanceOf(Date);
		expect(field.date({ nullable: true }).parse(null)).toBe(null);
	});

	it('BOOL -> check default', () => {
		expect(field.boolean(true).parse(undefined)).toEqual(true);
		expect(field.boolean(false).parse(undefined)).toEqual(false);
	});

	it('ENUM -> check defaults', () => {
		const tuple = ['a', 'b', 'c'];

		expect(() => field.enum(tuple).parse(null)).toThrow();
		expect(() => field.enum(tuple).parse(undefined)).toThrow();
		expect(() => field.enum(tuple).parse('d')).toThrow();

		expect(field.enum(tuple, { nullable: true }).parse(undefined)).toEqual(null);
		expect(field.enum(tuple, { nullable: true }).parse(null)).toEqual(null);

		expect(field.enum(tuple, { default: 'c' }).parse(undefined)).toEqual('c');
		expect(() => field.enum(tuple, { default: 'c' }).parse(null)).toThrow();
	});
});
